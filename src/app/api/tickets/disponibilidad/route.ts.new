import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

export const dynamic = 'force-dynamic'

const DisponibilidadSchema = z.object({
  rifaId: z.string().min(1)
})

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const { rifaId } = DisponibilidadSchema.parse({
      rifaId: searchParams.get('rifaId')
    })

    // Obtener informaci칩n de la rifa
    const rifa = await prisma.rifa.findUnique({
      where: { id: rifaId },
      select: {
        id: true,
        nombre: true,
        totalBoletos: true,
        precioPorBoleto: true,
        limitePorPersona: true,
        estado: true
      }
    })

    if (!rifa) {
      return NextResponse.json({
        success: false,
        error: 'Rifa no encontrada'
      }, { status: 404 })
    }

    if (rifa.estado !== 'ACTIVA') {
      return NextResponse.json({
        success: false,
        error: 'La rifa no est치 activa'
      }, { status: 400 })
    }

    // Obtener todos los tickets con sus estados
    const tickets = await prisma.ticket.findMany({
      where: { rifaId },
      select: {
        numero: true,
        estado: true
      },
      orderBy: { numero: 'asc' }
    })

    const disponibilidad = {
      rifa,
      tickets: tickets.map(ticket => ({
        numero: ticket.numero,
        estado: ticket.estado,
        disponible: ticket.estado === 'DISPONIBLE'
      })),
      estadisticas: {
        total: rifa.totalBoletos,
        disponibles: tickets.filter(t => t.estado === 'DISPONIBLE').length,
        reservados: tickets.filter(t => t.estado === 'RESERVADO').length,
        pagados: tickets.filter(t => t.estado === 'PAGADO').length
      }
    }

    return NextResponse.json({
      success: true,
      data: disponibilidad
    })

  } catch (error) {
    console.error('Error consultando disponibilidad:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        success: false,
        error: 'Par치metros inv치lidos',
        details: error.errors
      }, { status: 400 })
    }

    return NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, { status: 500 })
  }
}
